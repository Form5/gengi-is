
.row {
  @function grid-calc($colNumber, $totalColumns: $grid-count) {
    @return percentage($colNumber / $totalColumns);
  }
  @mixin grid-columns($name: 'span') {
    &.#{$name}-center {
      margin-#{$default-float}: auto;
      margin-#{$opposite-float}: auto;
      float: none !important;
    }
    @for $col from 0 through $grid-count {
      &.#{$name}-#{$col} { width: grid-calc($col); }
      &.#{$name}-offset-#{$col} { margin-left: grid-calc($col); }
    }
  }

  @include clearfix;
  margin: 0 auto $spacing;

  width: 100%;
  max-width: $page-max-width;
  min-width: $page-min-width;

  .col > & {
    margin-left: -$grid-gutter/2;
    margin-right: -$grid-gutter/2;
    width: auto;
  }

  .col {
    @include clearfix;
    float: $default-float;
    display: block;

    min-height: 1px;
    padding-left: $grid-gutter/2;
    padding-right: $grid-gutter/2;

    @include grid-columns('large');

    &.center {
      margin-#{$default-float}: auto;
      margin-#{$opposite-float}: auto;
      float: none !important;
    }

    &.reverse { float: $opposite-float; }

    @if $mobile-first {
      @include respond-to(middle-up) { @include grid-columns('middle-up'); }
      @include respond-to(medium-up) { @include grid-columns('medium-up'); }
      @include respond-to(large-up) { @include grid-columns('large-up'); }
    }
    @else {
      @include respond-to(medium) { @include grid-columns('medium'); }
      @include respond-to(middle) { @include grid-columns('middle'); }
      @include respond-to(small) { @include grid-columns('small'); }
    }
  }

  &.reverse > .col { float: $opposite-float; }

  &.no-gutter {
    margin-left: 0;
    margin-right: 0;

    > .col {
      padding-left: 0;
      padding-right: 0;
    }
  }

  > hr {
    clear: both;
  }
}
